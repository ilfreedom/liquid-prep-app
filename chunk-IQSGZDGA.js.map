{
  "version": 3,
  "sources": ["src/app/components/select-crop/select-crop.component.ts", "src/app/components/select-crop/select-crop.component.html", "src/app/components/select-crop/select-crop-routing.module.ts", "src/app/components/select-crop/select-crop.module.ts"],
  "sourcesContent": ["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Router} from '@angular/router';\nimport { Location } from '@angular/common';\nimport { Crop } from '../../models/Crop';\nimport { CropDataService } from '../../service/CropDataService';\nimport { HeaderService } from 'src/app/service/header.service';\nimport { HeaderConfig } from 'src/app/models/HeaderConfig.interface';\nimport { forkJoin, from } from 'rxjs';\n\n@Component({\n  selector: 'app-select-crop',\n  templateUrl: './select-crop.component.html',\n  styleUrls: ['./select-crop.component.scss']\n})\n\nexport class SelectCropComponent implements OnInit{\n\n  searchText = '';\n  headerConfig: HeaderConfig = {\n    headerTitle: 'Add a new crop',\n    leftIconName: 'close',\n    rightIconName: 'search',\n    leftBtnClick: this.handleLeftClick.bind(this),\n    rightBtnClick: null,\n  };\n\n  @ViewChild('searchbar') searchbar: ElementRef;\n\n  toggleSearch = false;\n  cropsList: Crop[];\n  NO_NEW_CROPS = '../../assets/crops-images/noNewCrops.PNG';\n  public requestingCrop = true;\n  private renderedHeadings: Set<string> = new Set<string>();\n\n  isAlreadyRendered(itemType: string): boolean {\n    if (this.renderedHeadings.has(itemType)) {\n      return true;\n    } else {\n      this.renderedHeadings.add(itemType);\n      return false;\n    }\n  }\n\n  constructor(private router: Router, private location: Location,\n              private cropService: CropDataService,\n              private headerService: HeaderService) { }\n\n  ngOnInit(): void {\n    this.headerService.updateHeader(this.headerConfig);\n\n    this.requestingCrop = true;\n\n    forkJoin({\n      cropsListData: this.cropService.getCropListFromApi(),\n      myCrops: from(this.cropService.getLocalStorageMyCrops())\n    }).subscribe(\n      (results) => {\n        const cropsListData = results.cropsListData;\n        const myCrops = results.myCrops;\n\n        this.cropsList = cropsListData.filter((crop) => {\n          return !myCrops.some((myCrop) => myCrop.id === crop.id);\n        });\n\n        console.log('select cropsList:', this.cropsList);\n        this.requestingCrop = false;\n      },\n      (error) => {\n        alert('Could not get crop list: ' + error);\n        this.requestingCrop = false;\n      }\n    );\n  }\n\n  public backClicked() {\n    this.location.back();\n  }\n\n  public onHeaderClick(data:string){\n    if(data == 'leftBtn'){\n      this.backClicked();\n    }else {\n      //TODO\n    }\n  }\n\n  public handleLeftClick(){\n    this.backToMyCrops();\n  }\n\n  backToMyCrops(){\n    this.location.back();\n  }\n\n  openSearch() {\n    this.toggleSearch = true;\n    this.searchbar.nativeElement.focus();\n  }\n  searchClose() {\n    this.searchText = '';\n    this.toggleSearch = false;\n  }\n\n  addCrop(clickedCrop: Crop) {\n    this.router.navigateByUrl('/seed-date/' + clickedCrop.id).then(r => {});\n  }\n\n  filterFunction(): Crop[]{\n    if (this.searchText === null || this.searchText === ''){\n      return this.cropsList;\n    }else{\n      return this.cropsList.filter(i => i.cropName.includes( this.searchText));\n    }\n  }\n}\n", "\n<mat-toolbar class=\"custom-toolbar\">\n  <button mat-icon-button class=\"blue-icon\" aria-label=\"LeftButton\" (click)=\"handleLeftClick()\">\n    <mat-icon>arrow_back</mat-icon>\n  </button>\n  <span class=\"toolbar-title\">Select a crop</span>\n  <span class=\"toolbar-spacer\"></span>\n  <button mat-icon-button class=\"blue-icon\" aria-label=\"RightButton\">\n    <mat-icon>volume_up</mat-icon>\n  </button>\n</mat-toolbar>\n\n\n<div *ngIf=\"requestingCrop\"\n     fxFlexFill fxLayout=\"column\"\n     fxLayoutGap=\"25px\"\n     fxLayoutAlign=\"center center\">\n  <div>\n    <mat-spinner diameter=\"100\" color=\"primary\"></mat-spinner>\n  </div>\n  <p>Loading...</p>\n</div>\n\n<div *ngIf=\"!requestingCrop\" class=\"add-crop\" style=\"overflow-x:hidden;\" fxFlexFill cdkScrollable>\n\n  <mat-toolbar class=\"search-block mat-elevation-z4\" [class.active]=\"toggleSearch\">\n    <mat-toolbar-row style=\"padding: 0 5px;\">\n      <button class=\"search-icon\" mat-icon-button disabled>\n        <mat-icon>search</mat-icon>\n      </button>\n      <input class=\"search-control\" type=\"text\" placeholder=\"Search\" [(ngModel)]=\"searchText\">\n      <button mat-button (click)=\"searchClose()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <div *ngIf=cropsList class=\"cropsList\">\n    <mat-grid-list class=\"grid\" cols=\"2\" rowHeight=\"229\" gutterSize=\"2px\">\n      <mat-grid-tile *ngFor=\"let crop of filterFunction()\">\n        <mat-card (click)=\"addCrop(crop)\">\n          <img mat-card-image class=\"cardImage\" src=\"{{ crop.url }}\" alt=\"{{ crop.cropName }}\" />\n          <mat-card-footer>\n            <mat-card-title class=\"cardTittle\">{{ crop.cropName }}</mat-card-title>\n          </mat-card-footer>\n        </mat-card>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </div>\n  <div *ngIf=\"!cropsList || cropsList.length === 0 \">\n      <mat-card>\n        <img mat-card-image class=\"cardImage\" src=\"{{ NO_NEW_CROPS }}\" />\n      </mat-card>\n  </div>\n</div>\n", "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SelectCropComponent } from './select-crop.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SelectCropComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SelectCropRoutingModule { }\n", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { SelectCropRoutingModule } from './select-crop-routing.module';\nimport { SelectCropComponent } from './select-crop.component';\nimport { MaterialModule } from '../../material/material.module';\nimport { FormsModule } from '@angular/forms';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\n\n@NgModule({\n  declarations: [SelectCropComponent],\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        SelectCropRoutingModule,\n        MaterialModule,\n        FormsModule,\n        MatProgressSpinnerModule\n    ]\n})\nexport class SelectCropModule { }\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275listener", "crop_r4", "\u0275\u0275restoreView", "_r3", "$implicit", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "addCrop", "\u0275\u0275advance", "\u0275\u0275propertyInterpolate", "url", "\u0275\u0275sanitizeUrl", "cropName", "\u0275\u0275textInterpolate", "\u0275\u0275template", "SelectCropComponent_div_11_div_10_mat_grid_tile_2_Template", "\u0275\u0275property", "filterFunction", "NO_NEW_CROPS", "\u0275\u0275twoWayListener", "$event", "_r1", "i0", "\u0275\u0275twoWayBindingSet", "searchText", "searchClose", "SelectCropComponent_div_11_div_10_Template", "SelectCropComponent_div_11_div_11_Template", "\u0275\u0275classProp", "toggleSearch", "\u0275\u0275twoWayProperty", "cropsList", "length", "SelectCropComponent", "isAlreadyRendered", "itemType", "renderedHeadings", "has", "add", "constructor", "router", "location", "cropService", "headerService", "headerConfig", "headerTitle", "leftIconName", "rightIconName", "leftBtnClick", "handleLeftClick", "bind", "rightBtnClick", "requestingCrop", "Set", "ngOnInit", "updateHeader", "forkJoin", "cropsListData", "getCropListFromApi", "myCrops", "from", "getLocalStorageMyCrops", "subscribe", "results", "filter", "crop", "some", "myCrop", "id", "console", "log", "error", "alert", "backClicked", "back", "onHeaderClick", "data", "backToMyCrops", "openSearch", "searchbar", "nativeElement", "focus", "clickedCrop", "navigateByUrl", "then", "r", "i", "includes", "\u0275\u0275directiveInject", "Router", "Location", "CropDataService", "HeaderService", "selectors", "viewQuery", "rf", "ctx", "SelectCropComponent_div_10_Template", "SelectCropComponent_div_11_Template", "_SelectCropComponent", "routes", "path", "component", "SelectCropComponent", "SelectCropRoutingModule", "RouterModule", "forChild", "_SelectCropRoutingModule", "SelectCropModule", "CommonModule", "FlexLayoutModule", "SelectCropRoutingModule", "MaterialModule", "FormsModule", "MatProgressSpinnerModule", "_SelectCropModule"]
}
